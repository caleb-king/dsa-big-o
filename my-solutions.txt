constant time O(1)
logarithmic time O(log(n))
linear time O(n)
polynomial time O(n^k)
exponential time O(2^n)

1.1) constant time O(1)
1.2) linear time O(n)
2) constant time O(1)
3) polynomial time O(n^k)
4) linear time O(n)
5) linear time O(n)
6) polynomial time O(n^k)
7) linear time O(n)
      creates fibonacci sequence
8) logarithmic time O(log(n))
9) constant time O(1)
10) linear time O(n)
      determines if number is prime
11) See towerOfHanoi function in index.js)
  If you are given 5 disks, how do the rods look like after 7 recursive calls?

   Move: 5
  
            |                   |                   |          
            |                   |                   |          
           ---                  |                   |          
        ---------               |                   |          
       -----------            -----              -------       
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  
  How many moves are needed to complete the puzzle with 3 disks?
        7
  How many moves are needed to complete the puzzle with 4 disks?
        15
  How many moves are needed to complete the puzzle with 5 disks?
        31
  What is the runtime of your algorithm?
        exponential time O(2^n)

12) (See iterativeVersion.js)
13) Recursive Big O
    1. Counting Sheep
        - linear time O(n)
    2. Power Calculator
        - linear time O(n)
    3. Reverse String
        - linear time O(n)
    4. nth Triangular Number
        - linear time O(n)
    5. String Splitter
        - linear time O(n)
    6. Fibonacci
        - linear time O(n)
    7. Factorial
        - linear time O(n)
    8. Find a way out of the maze
        - linear time O(n)
    9. Find ALL the ways out of the maze
        - exponential time O(2^n)?
    10. Anagrams
        - exponential time O(2^n)
    11. Organization Chart
        - linear time O(n)
    12. Binary Representation
        - logarithmic time O(log(n))

14) Iterative Big O
    1. Counting Sheep
        - linear time O(n)
    2. Power Calculator
        - linear time O(n)
    3. Reverse String
        - linear time O(n)
    4. nth Triangular Number
        - linear time O(n)
    5. String Splitter
        - linear time O(n)
    6. Fibonacci
        - linear time O(n)
    7. Factorial 
        - linear time O(n)